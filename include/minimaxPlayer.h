#ifndef MINIMAXPLAYER_H
#define MINIMAXPLAYER_H
#include "chessPlayer.h"
#include "ENUM.h"

class minimaxPlayer : public chessPlayer {
    private:
        int INF = 2000000;
        
        const int pst[6][8][8] =
        {
            // Pawn
            {
                {  0,  0,  0,  0,  0,  0,  0,  0 },
                { 50, 50, 50, 50, 50, 50, 50, 50 },
                { 10, 10, 20, 30, 30, 20, 10, 10 },
                {  5,  5, 10, 25, 25, 10,  5,  5 },
                {  0,  0,  0, 20, 20,  0,  0,  0 },
                {  5, -5,-10,  0,  0,-10, -5,  5 },
                {  5, 10, 10,-20,-20, 10, 10,  5 },
                {  0,  0,  0,  0,  0,  0,  0,  0 }
            },

            // Knight
            {
                { -50,-40,-30,-30,-30,-30,-40,-50 },
                { -40,-20,  0,  0,  0,  0,-20,-40 },
                { -30,  0, 10, 15, 15, 10,  0,-30 },
                { -30,  5, 15, 20, 20, 15,  5,-30 },
                { -30,  0, 15, 20, 20, 15,  0,-30 },
                { -30,  5, 10, 15, 15, 10,  5,-30 },
                { -40,-20,  0,  5,  5,  0,-20,-40 },
                { -50,-40,-30,-30,-30,-30,-40,-50 }
            },

            // Bishop
            {
                { -20,-10,-10,-10,-10,-10,-10,-20 },
                { -10,  0,  0,  0,  0,  0,  0,-10 },
                { -10,  0,  5, 10, 10,  5,  0,-10 },
                { -10,  5,  5, 10, 10,  5,  5,-10 },
                { -10,  0, 10, 10, 10, 10,  0,-10 },
                { -10, 10, 10, 10, 10, 10, 10,-10 },
                { -10,  5,  0,  0,  0,  0,  5,-10 },
                { -20,-10,-10,-10,-10,-10,-10,-20 }
            },

            // Rook
            {
                {  0,  0,  0,  0,  0,  0,  0,  0 },
                {  5, 10, 10, 10, 10, 10, 10,  5 },
                { -5,  0,  0,  0,  0,  0,  0, -5 },
                { -5,  0,  0,  0,  0,  0,  0, -5 },
                { -5,  0,  0,  0,  0,  0,  0, -5 },
                { -5,  0,  0,  0,  0,  0,  0, -5 },
                { -5,  0,  0,  0,  0,  0,  0, -5 },
                {  0,  0,  0,  5,  5,  0,  0,  0 }
            },

            // Queen
            {
                { -20,-10,-10, -5, -5,-10,-10,-20 },
                { -10,  0,  0,  0,  0,  0,  0,-10 },
                { -10,  0,  5,  5,  5,  5,  0,-10 },
                {  -5,  0,  5,  5,  5,  5,  0, -5 },
                {   0,  0,  5,  5,  5,  5,  0, -5 },
                { -10,  5,  5,  5,  5,  5,  0,-10 },
                { -10,  0,  5,  0,  0,  0,  0,-10 },
                { -20,-10,-10, -5, -5,-10,-10,-20 }
            },

            // King (Early & Mid Game)
            {
                { -30,-40,-40,-50,-50,-40,-40,-30 },
                { -30,-40,-40,-50,-50,-40,-40,-30 },
                { -30,-40,-40,-50,-50,-40,-40,-30 },
                { -30,-40,-40,-50,-50,-40,-40,-30 },
                { -20,-30,-30,-40,-40,-30,-30,-20 },
                { -10,-20,-20,-20,-20,-20,-20,-10 },
                {  20, 20,  0,  0,  0,  0, 20, 20 },
                {  20, 30, 10,  0,  0, 10, 30, 20 }
            }
        };
    
    public:
        minimaxPlayer(Color playerColor=White);
        void decideMove(gameState* state, action* Move, int maxDepth);
        int getPieceMaterial(const int& piece);
        int getPieceSquareValue(const int& piece, const int& row, const int& col);
        int evaluate(gameState* state);
        int minimax(gameState* state, int currDepth, int a, int b, bool white);
};


#endif // MINIMAXPLAYER_H
